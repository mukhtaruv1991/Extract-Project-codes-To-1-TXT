#!/data/data/com.termux/files/usr/bin/bash

# --- Mukh-IDE Project Backup Tool (backup-txt) ---

# --- Configuration ---
CONFIG_FILE="$HOME/.backup-txt.conf"

# --- Help Message Function ---
show_help() {
  echo "Mukh-IDE Project Backup Tool (v2.0)"
  echo ""
  echo "A versatile tool to back up, clone, and share your projects from Termux."
  echo ""
  echo "USAGE:"
  echo "  backup-txt [OPTION] [--zip]"
  echo ""
  echo "PRIMARY OPTIONS:"
  echo "  -t, --text     (Default) Extracts all code into a single .txt file."
  echo "  -c, --clone    Clones the entire project directory, ignoring unnecessary files."
  echo "  --setup        Configures your Telegram Bot for the send feature."
  echo "  -h, --help     Displays this help message."
  echo ""
  echo "SECONDARY OPTIONS (Combine with a primary option):"
  echo "  -s, --send     Sends the final backup file (.txt or .zip) to Telegram."
  echo "  -i, --share    Opens the Android share menu for the final backup file."
  echo "  --zip          When used with --clone, compresses the cloned project into a .zip file."
  echo ""
  echo "EXAMPLES:"
  echo "  backup-txt -t -s          # Create a .txt backup and send it to Telegram"
  echo "  backup-txt --clone --zip  # Clone the project into a compressed .zip file"
  echo "  backup-txt -c -i          # Clone the project and open the share menu for the .zip file"
}

# --- Action Parsing ---
PRIMARY_ACTION=""
SECONDARY_ACTION=""
COMPRESS=false

while [ "$#" -gt 0 ]; do
  case "$1" in
    -t|--text) PRIMARY_ACTION="text" ;;
    -c|--clone) PRIMARY_ACTION="clone" ;;
    -s|--send) SECONDARY_ACTION="send" ;;
    -i|--share) SECONDARY_ACTION="share" ;;
    --zip) COMPRESS=true ;;
    --setup) PRIMARY_ACTION="setup" ;;
    -h|--help) show_help; exit 0 ;;
    *) echo "Unknown option: $1"; show_help; exit 1 ;;
  esac
  shift
done

# Default to text backup if no primary action is given
[ -z "$PRIMARY_ACTION" ] && PRIMARY_ACTION="text"

# --- Setup Action ---
if [[ "$PRIMARY_ACTION" == "setup" ]]; then
  echo "--- Telegram Bot Setup ---"
  read -p "Enter your Bot Token: " BOT_TOKEN
  read -p "Enter your Chat ID: " CHAT_ID
  echo "BOT_TOKEN='$BOT_TOKEN'" > "$CONFIG_FILE"; echo "CHAT_ID='$CHAT_ID'" >> "$CONFIG_FILE"
  echo "✅ Credentials saved to $CONFIG_FILE"; exit 0
fi

# --- Main Logic ---
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"

PROJECT_PATH=$(pwd)
PROJECT_NAME=$(basename "$PROJECT_PATH")
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M")
OUTPUT_DIR="/storage/emulated/0/Projects_Backups"
mkdir -p "$OUTPUT_DIR"

# IGNORE LISTS
IGNORE_PATTERNS=( '.git' '.idea' 'build' 'dist' 'out' 'node_modules' 'vendor' 'packages' '.gradle' 'captures' '.externalNativeBuild' 'gen' 'bin' '__pycache__' '*.apk' '*.aab' '*.aar' '*.ap_' '*.dex' '*.class' '*.log' '*.lock' '*.tmp' '*.swp' '*.swo' 'local.properties' '*.jks' '*.keystore' '.DS_Store' 'Thumbs.db' '*.iml' '*.zip' '*.tar.gz' '*.tar' )
RSYNC_EXCLUDES=""
for pattern in "${IGNORE_PATTERNS[@]}"; do RSYNC_EXCLUDES+=" --exclude '$pattern'"; done

echo "🚀 Starting backup for project: $PROJECT_NAME"

# --- Clone Action ---
if [[ "$PRIMARY_ACTION" == "clone" ]]; then
  CLONE_DIR="$OUTPUT_DIR/${PROJECT_NAME}_${TIMESTAMP}"
  OUTPUT_FILE="$CLONE_DIR.zip" # Default for compressed
  
  echo "Cloning project structure (excluding ignored files)..."
  mkdir -p "$CLONE_DIR"
  eval "rsync -a --progress . \"$CLONE_DIR/\" $RSYNC_EXCLUDES"
  
  if [ "$COMPRESS" = true ]; then
    echo "Compressing cloned directory..."
    (cd "$CLONE_DIR" && zip -r9 "$OUTPUT_FILE" .)
    rm -rf "$CLONE_DIR" # Clean up directory after zipping
    echo "✅ Project compressed to $OUTPUT_FILE"
  else
    OUTPUT_FILE="$CLONE_DIR" # The output is the directory itself
    echo "✅ Project cloned to $OUTPUT_FILE"
  fi

# --- Text Backup Action ---
elif [[ "$PRIMARY_ACTION" == "text" ]]; then
  OUTPUT_FILE="$OUTPUT_DIR/${PROJECT_NAME}_${TIMESTAMP}.txt"
  [ -f "$OUTPUT_FILE" ] && rm "$OUTPUT_FILE"
  echo "Consolidating code into a single .txt file..."
  
  process_directory() {
    local base_path="$1"; local relative_prefix="$2"
    find "$base_path" -maxdepth 1 | while read -r item; do
      if [ "$item" == "$base_path" ]; then continue; fi
      local item_basename=$(basename "$item"); local relative_path="${relative_prefix}${item_basename}"
      for pattern in "${IGNORE_PATTERNS[@]}"; do [[ "$item_basename" == $pattern ]] && continue 2; done
      if [[ "$item_basename" == *.zip ]] || [[ "$item_basename" == *.tar.gz ]] || [[ "$item_basename" == *.tar ]]; then
        local temp_dir=$(mktemp -d); echo "⬇️ Decompressing: $relative_path"
        echo "================ ARCHIVE: $relative_path ================" >> "$OUTPUT_FILE"
        [[ "$item_basename" == *.zip ]] && unzip -q "$item" -d "$temp_dir" || tar -xf "$item" -C "$temp_dir"
        process_directory "$temp_dir" "${relative_path}/"; rm -rf "$temp_dir"; continue
      fi
      if [ -d "$item" ]; then process_directory "$item" "${relative_path}/";
      elif [ -f "$item" ]; then
        echo "Processing: $relative_path"; echo "================ FILE: $relative_path ================" >> "$OUTPUT_FILE"
        cat "$item" >> "$OUTPUT_FILE"; echo -e "\n\n" >> "$OUTPUT_FILE"
      fi
    done
  }
  process_directory "." ""
  echo "✅ Code consolidated into $OUTPUT_FILE"
fi

# --- Post-backup Actions (Send/Share) ---
if [[ "$SECONDARY_ACTION" == "send" ]]; then
  if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then echo "❌ Telegram not configured. Run 'backup-txt --setup'."; exit 1; fi
  echo "🚀 Sending file to Telegram..."; curl -s -F document=@"$OUTPUT_FILE" -F caption="Backup of '$PROJECT_NAME'" "https://api.telegram.org/bot$BOT_TOKEN/sendDocument?chat_id=$CHAT_ID" > /dev/null
  [ $? -eq 0 ] && echo "✅ File sent!" || echo "❌ Failed to send."
elif [[ "$SECONDARY_ACTION" == "share" ]]; then
  if [ ! -f "$OUTPUT_FILE" ]; then echo "❌ Share error: Not a file. Cannot share a directory."; exit 1; fi
  echo "📲 Opening Android share menu..."; termux-share -a send "$OUTPUT_FILE"
  [ $? -eq 0 ] && echo "✅ Share action completed." || echo "❌ Share failed. Is Termux:API installed?"
fi

# --- Script End ---
