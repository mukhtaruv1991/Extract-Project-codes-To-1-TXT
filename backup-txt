#!/data/data/com.termux/files/usr/bin/bash
# Mukh-IDE Backup Tool (v3.0)
CONFIG_FILE="$HOME/.backup-txt.conf"
show_help() {
  echo "Mukh-IDE Backup Tool (v3.0)"
  echo "Back up projects or single files from Termux."
  echo "USAGE: backup-txt [OPTION]"
  echo "OPTIONS:"
  echo "  -t, --text     (Default) Extract project code to a .txt file."
  echo "  -c, --clone    Clone project directory, ignoring unnecessary files."
  echo "  -n, --name     Back up a single file by name or path."
  echo "  --setup        Configure Telegram Bot."
  echo "  -h, --help     Show this help message."
  echo "  -s, --send     Send backup to Telegram."
  echo "  -i, --share    Use Android's share menu."
  echo "  --zip          Use with --clone to create a .zip file."
}
PRIMARY_ACTION=""; SECONDARY_ACTION=""; COMPRESS=false
while [ "$#" -gt 0 ]; do
  case "$1" in
    -t|--text) PRIMARY_ACTION="text";; -c|--clone) PRIMARY_ACTION="clone";; -n|--name) PRIMARY_ACTION="name";;
    -s|--send) SECONDARY_ACTION="send";; -i|--share) SECONDARY_ACTION="share";; --zip) COMPRESS=true;;
    --setup) PRIMARY_ACTION="setup";; -h|--help) show_help; exit 0;;
    *) echo "Unknown option: $1"; show_help; exit 1;;
  esac; shift
done
[ -z "$PRIMARY_ACTION" ] && PRIMARY_ACTION="text"
if [[ "$PRIMARY_ACTION" == "setup" ]]; then
  read -p "Enter Bot Token: " BOT_TOKEN; read -p "Enter Chat ID: " CHAT_ID
  echo "BOT_TOKEN='$BOT_TOKEN'" > "$CONFIG_FILE"; echo "CHAT_ID='$CHAT_ID'" >> "$CONFIG_FILE"
  echo "‚úÖ Credentials saved."; exit 0
fi
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
OUTPUT_DIR="/storage/emulated/0/Projects_Backups"; mkdir -p "$OUTPUT_DIR"
if [[ "$PRIMARY_ACTION" == "name" ]]; then
  read -p "Enter file name or path: " FILE_INPUT; FILE_PATH=""
  if [[ "$FILE_INPUT" == /* ]]; then [ -f "$FILE_INPUT" ] && FILE_PATH="$FILE_INPUT";
  elif [ -f "./$FILE_INPUT" ]; then FILE_PATH="./$FILE_INPUT";
  elif [ -f "$HOME/bin/$FILE_INPUT" ]; then FILE_PATH="$HOME/bin/$FILE_INPUT"; fi
  if [ -z "$FILE_PATH" ]; then echo "‚ùå File not found."; exit 1; fi
  FILENAME=$(basename "$FILE_PATH"); OUTPUT_FILE="$OUTPUT_DIR/$FILENAME"
  cp "$FILE_PATH" "$OUTPUT_FILE"; echo "‚úÖ File copied to: $OUTPUT_FILE"
else
  PROJECT_NAME=$(basename "$(pwd)"); TIMESTAMP=$(date +"%Y-%m-%d_%H-%M")
  IGNORE_PATTERNS=( '.git' '.idea' 'build' 'dist' 'out' 'node_modules' 'vendor' 'packages' '.gradle' 'gen' 'bin' '__pycache__' '*.apk' '*.aab' '*.log' '*.lock' '*.tmp' '*.swp' 'local.properties' '*.jks' '.DS_Store' '*.iml' '*.zip' '*.tar.gz' )
  RSYNC_EXCLUDES=""; for p in "${IGNORE_PATTERNS[@]}"; do RSYNC_EXCLUDES+=" --exclude '$p'"; done
  echo "üöÄ Backing up project: $PROJECT_NAME"
  if [[ "$PRIMARY_ACTION" == "clone" ]]; then
    CLONE_DIR="$OUTPUT_DIR/${PROJECT_NAME}_${TIMESTAMP}"; OUTPUT_FILE="$CLONE_DIR.zip"
    mkdir -p "$CLONE_DIR" && eval "rsync -a . \"$CLONE_DIR/\" $RSYNC_EXCLUDES"
    if [ "$COMPRESS" = true ]; then (cd "$CLONE_DIR" && zip -r9 "$OUTPUT_FILE" .); rm -rf "$CLONE_DIR"; echo "‚úÖ Compressed to $OUTPUT_FILE";
    else OUTPUT_FILE="$CLONE_DIR"; echo "‚úÖ Cloned to $OUTPUT_FILE"; fi
  elif [[ "$PRIMARY_ACTION" == "text" ]]; then
    OUTPUT_FILE="$OUTPUT_DIR/${PROJECT_NAME}_${TIMESTAMP}.txt"; [ -f "$OUTPUT_FILE" ] && rm "$OUTPUT_FILE"
    # Simplified text processing logic for brevity
    find . -type f | while read -r file; do
        is_ignored=false
        for pattern in "${IGNORE_PATTERNS[@]}"; do if [[ "$file" == *"$pattern"* ]]; then is_ignored=true; break; fi; done
        if ! $is_ignored; then echo "--- FILE: $file ---" >> "$OUTPUT_FILE"; cat "$file" >> "$OUTPUT_FILE"; echo -e "\n" >> "$OUTPUT_FILE"; fi
    done
    echo "‚úÖ Consolidated to $OUTPUT_FILE"
  fi
fi
if [[ "$SECONDARY_ACTION" == "send" ]]; then
  [ -z "$BOT_TOKEN" ] && { echo "‚ùå Telegram not configured."; exit 1; }
  curl -s -F document=@"$OUTPUT_FILE" "https://api.telegram.org/bot$BOT_TOKEN/sendDocument?chat_id=$CHAT_ID" > /dev/null && echo "‚úÖ Sent!"
elif [[ "$SECONDARY_ACTION" == "share" ]]; then
  [ ! -f "$OUTPUT_FILE" ] && { echo "‚ùå Cannot share a directory."; exit 1; }
  termux-share -a send "$OUTPUT_FILE"
fi
